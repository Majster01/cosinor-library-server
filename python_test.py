import socketio
import sys
import json
import base64
import tempfile
import csv

sys.path.insert(0,'/home/majster/Documents/diplomska/CosinorPyCustom')

from CosinorPy import file_parser, cosinor, cosinor1
import numpy as np
import pandas as pd
import io

class CommandError(Exception):
  def __init__(self, message):
    super().__init__(message)

def mapToXY(line):
  return [{'x': point[0], 'y': point[1]} for point in line]

def raiseUnsupportedCommandError(csv = None):
  raise CommandError('Unsupported command')

def getCosinorFunction(command):
  switcher={
    'periodogram': periodogram,
    'fit_group': fit_group,
  }

  return switcher.get(command, raiseUnsupportedCommandError)

def periodogram(file):

  if file == None:
    df = file_parser.generate_test_data(phase = 0, n_components = 1, name="test1", noise=0.5, replicates = 1)
  else:
    df = file_parser.read_csv(file, ',')

  print(df)
  pyplot = cosinor.periodogram_df(df)

  lines = pyplot.gca().get_lines()

  return [mapToXY(line.get_xydata().tolist()) for line in lines]

def pyplotToBase64(plot):
  buf = io.BytesIO()
  plot.savefig(buf, format='png')
  buf.seek(0)

  base64bytes = base64.b64encode(buf.read())
  base64_message = base64bytes.decode('utf-8')

  return base64_message

def fit_group_independent(data, cosinorType, options):

  print('fit_group_independent')
  file = getFile(data)
  
  df = file_parser.read_csv(file, '\t')

  figure_image_list = []

  period=options['period']

  response = None

  print('cosinorType == general cosinor')
  print(cosinorType)
  if cosinorType == 'general cosinor':
    n_components = options['n_components']

    plot = True
    if (n_components == [1,2,3]):
      plot = False

    print('before fit_group')
    result_df = cosinor.fit_group(df, n_components = n_components, period=period, plot=plot, figure_image_list=figure_image_list)

    if (plot == False):
      print('before get_best_models')
      df_best_models = cosinor.get_best_models(df, df_models = result_df, n_components = [1,2,3])

      print('before plot_df_models')
      cosinor.plot_df_models(df, df_best_models, plot_residuals=False, figure_image_list=figure_image_list)
      response = df_best_models.to_dict('list')
    else:
      response = result_df.to_dict('list')

  elif cosinorType == 'cosinor1':
    result_df = cosinor1.fit_group(df, period=options['period'], figure_image_list=figure_image_list)
    response = result_df.to_dict('list')

  return json.dumps({
    'graphs': figure_image_list,
    'data': response,
  })

def fit_group_population(data, cosinorType, options):
  file = getFile(data)
  
  df = file_parser.read_csv(file, '\t')

  figure_image_list = []

  if cosinorType == 'general cosinor':

    n_components = options['n_components']

    plot = True
    if (n_components == [1,2,3]):
      plot = False

    result_df = cosinor.population_fit_group(df, n_components = n_components, period=options['period'], plot_measurements = plot, figure_image_list=figure_image_list)

    if (plot == False):
      df_best_models = cosinor.get_best_models_population(df, df_models = result_df, n_components = [1,2,3])

      cosinor.plot_df_models_population(df, df_best_models, figure_image_list=figure_image_list)

      data = df_best_models.to_json(orient='records')
    else:
      data = result_df.to_json(orient='records')
  elif cosinorType == 'cosinor1':
    result_df = cosinor1.population_fit_group(df, period=options['period'], figure_image_list=figure_image_list)

    data = result_df.to_json(orient='records')


  return json.dumps({
    'graphs': figure_image_list,
    'data': json.loads(data),
  })

def comparison_independent(data, cosinorType, options):

  print('comparison_independent')
  file = getFile(data)
  
  df = file_parser.read_csv(file, '\t')

  figure_image_list = []

  period=options['period']

  response = None

  print('cosinorType == general cosinor')
  print(cosinorType)
  if cosinorType == 'general cosinor':
    n_components = options['n_components']

    plot = True
    if (n_components == [1,2,3]):
      plot = False

    print('before fit_group')
    result_df = cosinor.fit_group(df, n_components = n_components, period=period, plot=plot, figure_image_list=figure_image_list)

    if (plot == False):
      print('before get_best_models')
      df_best_models = cosinor.get_best_models(df, df_models = result_df, n_components = [1,2,3])

      print('before plot_df_models')
      cosinor.plot_df_models(df, df_best_models, plot_residuals=False, figure_image_list=figure_image_list)
      response = df_best_models.to_dict('list')
    else:
      response = result_df.to_dict('list')

  elif cosinorType == 'cosinor1':
    result_df = cosinor1.fit_group(df, period=options['period'], figure_image_list=figure_image_list)
    response = result_df.to_dict('list')

  return json.dumps({
    'graphs': figure_image_list,
    'data': response,
  })

def getFile(fileString):
  s = io.StringIO(fileString)

  print(s)

  return io.StringIO(fileString)

def validateGenerateData(payload):
  if 'command' not in payload:
    raiseUnsupportedCommandError()
  if 'options' not in payload:
    raiseUnsupportedCommandError()

  options = payload['options']

  if 'components' not in options:
    components = None
  else:
    components = options['components']

  
  if 'period' not in options:
    period = None
  else:
    period = options['period']

  
  if 'amplitudes' not in options:
    amplitudes = None
  else:
    amplitudes = options['amplitudes']

  
  if 'noise' not in options:
    noise = None
  else:
    noise = options['noise']

  return components, period, amplitudes, noise

csvFileType = 'text/csv'
xlsxFileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'

def getDataFrame(fileType, fileString):
  if fileType == csvFileType:
    file = io.StringIO(fileString)

    return file_parser.read_csv(file, '\t')
  elif fileType == xlsxFileType:
    base64_bytes = fileString.encode('ascii')
    message_bytes = base64.b64decode(base64_bytes)
    file = io.BytesIO(message_bytes)

    return file_parser.read_excel(file)

def generate_data():
  df1 = file_parser.generate_test_data(phase = 0, n_components = 1, name="test1", noise=0.5, replicates = 1)
  df2 = file_parser.generate_test_data(phase = 0, n_components = 1, name="test2", noise=0.5, replicates = 1)

  df = df1.append(df2)

  csv_buffer = io.StringIO()
  file_parser.export_csv(df, csv_buffer)

  csv_string = csv_buffer.getvalue()

  return csv_string


if __name__ == "__main__":
  csv_string = generate_data()

  print('CSV')
  print(csv_string)

  xlsx_string = ''
  df = getDataFrame(xlsxFileType, xlsx_string)

  figure_image_list = []
  result_df = cosinor.fit_group(df, n_components = 1, period=24, plot=True, figure_image_list=figure_image_list)


  print(result_df)
